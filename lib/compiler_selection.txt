# GC-patches how-to

## Features

* instrumented GC: this is a bunch of timers and counters inserted in
  various places in the GC that helps figure out where the time is
  spent and especially what causes long pauses. These timers record,
  for example, the time spent on every minor collection, major
  collection slice (marking and sweeping recorded separately), etc.

* low-latency improvements: a set of small patches that removes the
  sources of large GC pauses, hence shortening the tail of the latency
  distribution. These are:
  - incremental marking of large arrays
  - incremental marking of global roots
  - separation of major slice from minor GC
  - smoothing of the major GC workload
  - better management of explicit calls to the major GC

* huge pages: use mmap with the "huge pages" flag to allocate the
  heap, to reduce the pressure on the TLB for programs with large
  heaps

* contiguous heap: use mmap to allocate the heap in a reserved
  interval of addresses to reduce the cost of the write barrier


## Usage

* compiler flags: you can add one of the following to the environment
  variable OCAMLOPTFLAGS:
  - `-runtime-variant i` to get the instrumented GC
  - `-runtime-variant m` to get the contiguous mmapped heap
  Note that you don't need to set anything here to get the
  low-latency improvements or the huge pages.
  With `M-x Omake.setenv`, <space> is bound to auto-completion, so you
  need to use `C-q <space>` to insert a space in the value.

* environment variables (set these before running the program):
  - OCAML_INSTR_FILE controls the output of the instrumented GC: set
    it to `[@][+-]filename`, where `@` makes the runtime append the
    process ID to the file name, `+` indicates that the data should be
    appended to the file, and `-` that the file should be truncated
    before writing. If you specify neither `+` nor `-`, the data will be
    appended.
  - OCAMLRUNPARAM has two new options:
    * `w=n`, where n is a small integer (1 to 50) to specify the
      window size for the GC workload smoothing. Reasonable values are
      probably between 10 and 20.
    * `H=1` to force the use of huge pages to allocate the heap. The
      program will fail if huge pages are not available.


## Notes

The instrumented runtime `-runtime-variant i` logs every event to
memory (even if OCAML_INSTR_FILE is not set) and dumps them at the end
of the run, so it's obviously not suitable for long-running
programs. It's also not suitable for benchmarking.

Once you have the instrumentation files, you can use two scripts on them:
* `ocaml-instr-report`: gives ASCII histograms of the distributions of
  the counters and timers.
* `ocaml-instr-graph`: uses gnuplot to show the data, with time on the
  x-axis.
These scripts are available in:
    /j/office/app/ocaml/builds/4.02.2-gc+j2-cent6_20150716_113018BST/bin/

With `-runtime-variant m`, the GC tries to allocate huge pages first,
then falls back on normal pages unless `H=1` is specified in
`OCAMLRUNPARAM`. If you specify `H=1` and you get:
  cannot initialize minor heap: mmap failed
that means your system doesn't have any huge pages configured. You
will need to get your sysadmin to configure them.

You can also control the new GC features from within the program by
using module `Gc_temp` in the standard library. See the interface
below.

The build system defines the macro OCAML_GC_BETA, which you can test
with IFDEF in files that are processed by camlp4 with
`pa_macro.cmo`. This lets you write code that will use `Gc_temp` only
if it's available. See the example below.

--------------------------------- example use of pa_macro.cmo -------------
In your jbuild file, add:
```
    (preprocess (((pps (JANE pa_macro)) All)))
```

then in your source you can do this:

```
IFDEF OCAML_GC_BETA THEN
open Gc_temp
ELSE
open Gc
ENDIF

open Printf
let f () =
  let p = get () in
  printf "minor_heap_size = %d\n" p.minor_heap_size;
  printf "major_heap_increment = %d\n" p.major_heap_increment;
  printf "space_overhead = %d\n" p.space_overhead;
  printf "verbose = %d\n" p.verbose;
  printf "max_overhead = %d\n" p.max_overhead;
  printf "stack_limit = %d\n" p.stack_limit;
  printf "allocation_policy = %d\n" p.allocation_policy;
IFDEF OCAML_GC_BETA THEN
  printf "window_size = %d\n" p.window_size;
  printf "runtime_variant = %S\n" (runtime_variant ());
  printf "runtime_parameters = %s\n" (runtime_parameters ());
ELSE
  printf "gc improvements: absent\n";
ENDIF
```

--------------------------------- gc_temp.mli -----------------------------------
```
(* additional GC functions *)
(* These are in a separate file because we want to do our testing
   on code that doesn't like changes to the Gc module's interface.
   Ultimately, these new functions will be in Gc.
*)

external get_minor_free : unit -> int = "caml_get_minor_free" "noalloc"
(** Return the current size of the free space inside the minor heap. *)

external get_bucket : int -> int = "caml_get_major_bucket" "noalloc"
(** [get_bucket n] returns the current size of the [n]-th future bucket
    of the GC smoothing system. The unit is one millionth of a full GC.
    Raise [Invalid_argument] if [n] is negative, return 0 if n is larger
    than the smoothing window.
*)

external get_credit : unit -> int = "caml_get_major_credit" "noalloc"
(** [get_bucket n] returns the current size of the "work done in advance"
    counter of the GC smoothing system. The unit is one millionth of a
    full GC.
*)

type control =
  { mutable minor_heap_size : int;
    (** The size (in words) of the minor heap.  Changing
       this parameter will trigger a minor collection.  Default: 256k. *)

    mutable major_heap_increment : int;
    (** How much to add to the major heap when increasing it. If this
        number is less than or equal to 1000, it is a percentage of
        the current heap size (i.e. setting it to 100 will double the heap
        size at each increase). If it is more than 1000, it is a fixed
        number of words that will be added to the heap. Default: 15. *)

    mutable space_overhead : int;
    (** The major GC speed is computed from this parameter.
       This is the memory that will be "wasted" because the GC does not
       immediatly collect unreachable blocks.  It is expressed as a
       percentage of the memory used for live data.
       The GC will work more (use more CPU time and collect
       blocks more eagerly) if [space_overhead] is smaller.
       Default: 80. *)

    mutable verbose : int;
    (** This value controls the GC messages on standard error output.
       It is a sum of some of the following flags, to print messages
       on the corresponding events:
       - [0x001] Start of major GC cycle.
       - [0x002] Minor collection and major GC slice.
       - [0x004] Growing and shrinking of the heap.
       - [0x008] Resizing of stacks and memory manager tables.
       - [0x010] Heap compaction.
       - [0x020] Change of GC parameters.
       - [0x040] Computation of major GC slice size.
       - [0x080] Calling of finalisation functions.
       - [0x100] Bytecode executable search at start-up.
       - [0x200] Computation of compaction triggering condition.
       Default: 0. *)

    mutable max_overhead : int;
    (** Heap compaction is triggered when the estimated amount
       of "wasted" memory is more than [max_overhead] percent of the
       amount of live data.  If [max_overhead] is set to 0, heap
       compaction is triggered at the end of each major GC cycle
       (this setting is intended for testing purposes only).
       If [max_overhead >= 1000000], compaction is never triggered.
       If compaction is permanently disabled, it is strongly suggested
       to set [allocation_policy] to 1.
       Default: 500. *)

    mutable stack_limit : int;
    (** The maximum size of the stack (in words).  This is only
       relevant to the byte-code runtime, as the native code runtime
       uses the operating system's stack.  Default: 1024k. *)

    mutable allocation_policy : int;
    (** The policy used for allocating in the heap.  Possible
        values are 0 and 1.  0 is the next-fit policy, which is
        quite fast but can result in fragmentation.  1 is the
        first-fit policy, which can be slower in some cases but
        can be better for programs with fragmentation problems.
        Default: 0. @since 3.11.0 *)

    window_size : int;
    (** The size of the window used by the major GC for smoothing
        out variations in its workload. This is an integer between
        1 and 50.
        Default: 1. @since 4.03.0 *)
}

external get : unit -> control = "caml_gc_get"
(** Return the current values of the GC parameters in a [control] record. *)

external set : control -> unit = "caml_gc_set"
(** [set r] changes the GC parameters according to the [control] record [r].
   The normal usage is: [Gc.set { (Gc.get()) with Gc.verbose = 0x00d }] *)

external huge_fallback_count : unit -> int = "caml_gc_huge_fallback_count"
(** Return the number of times we tried to map huge pages and had to fall
    back to small pages. This is always 0 if [OCAMLRUNPARAM] contains [H=1].
    @since 4.03.0
*)


(* Additional functions for [Sys] *)

external runtime_variant : unit -> string = "caml_runtime_variant"
(** Return the name of the runtime variant the program is running on.
    This is normally the argument given to [-runtime-variant] at compile
    time, but for byte-code it can be changed after compilation.
   @since 4.03.0
*) (* FIXME This function belongs in [Sys] rather than [Gc]. *)

external runtime_parameters : unit -> string = "caml_runtime_parameters"
(** Return the value of the runtime parameters, in the same format
    as the contents of the OCAMLRUNPARAM environment variable.
   @since 4.03.0
*) (* FIXME move to [Sys] *)
```
